AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster and Fargate Service for ePlaneAI Website Cron Service

Parameters:
  ProjectName:
    Type: String
    Description: Project name (e.g., eplaneai-website-cron-service)

  Environment:
    Type: String
    AllowedValues: [dev, prod]
    Description: Deployment environment

  VPCId:
    Type: String
    Description: VPC ID passed from networking stack

  PrivateSubnet1Id:
    Type: String
    Description: Private subnet 1 ID

  PrivateSubnet2Id:
    Type: String
    Description: Private subnet 2 ID

  ImageTag:
    Type: String
    Description: Docker image tag (typically Git SHA)
  
  Cpu:
    Type: String
    Default: "512"
    Description: CPU units (e.g. 512 = 0.5 vCPU)

  Memory:
    Type: String
    Default: "1024"
    Description: Memory (in MiB)

  DesiredCount:
    Type: Number
    Default: 1
    Description: Number of tasks to run

  MinCapacity:
    Type: Number
    Default: 1
    Description: Minimum number of tasks to run

  MaxCapacity:
    Type: Number
    Default: 1
    Description: Maximum number of tasks to run

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Environment}-${ProjectName}-cluster"

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-${ProjectName}-ecsExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-${ProjectName}-taskRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSecretsManagerRead
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/eplane-ai/app/cronserver*"

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${Environment}-${ProjectName}"
      RetentionInDays: 365

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: !Sub "${Environment}-${ProjectName}-task"
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${Environment}-${ProjectName}-container"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Environment}-${ProjectName}-repo:${ImageTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: SECRET_PATH
              Value: !Sub "${Environment}/eplane-ai/app/cronserver"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "No-ingress SG for ${Environment}-${ProjectName}"
      VpcId: !Ref VPCId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-${ProjectName}-sg"

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ECSCluster
    Properties:
      ServiceName: !Sub "${Environment}-${ProjectName}-service"
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
      TaskDefinition: !Ref TaskDefinition

  ECSServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      MaxCapacity: !Ref MaxCapacity
      MinCapacity: !Ref MinCapacity
      ResourceId: !Sub "service/${Environment}-${ProjectName}-cluster/${Environment}-${ProjectName}-service"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs


  ECSServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ECSServiceScalableTarget
    Properties:
      PolicyName: !Sub "${Environment}-${ProjectName}-scale-policy"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ECSClusterName"

  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub "${AWS::StackName}-TaskDefinitionArn"

  LogGroupName:
    Description: CloudWatch Log Group
    Value: !Ref LogGroup
    Export:
      Name: !Sub "${AWS::StackName}-LogGroupName"