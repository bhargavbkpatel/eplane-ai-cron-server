generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Chat {
  id             String       @id @default(uuid())
  hashIpAddress  String?
  createdAt      DateTime     @default(now())
  name           String       @default("")
  isFavorite     Boolean      @default(false)
  isShared       Boolean      @default(false)
  geo            Json?
  chartData      ChartData?
  messages       Message[]
  sharedAsParent SharedChat[] @relation("Parent")
}

model Message {
  id         String   @id @default(uuid())
  role       String
  content    String
  createdAt  DateTime @default(now())
  chatId     String?
  isLiked    Boolean  @default(false)
  isDisliked Boolean  @default(false)
  chat       Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Parts {
  id                        String   @id @default(uuid())
  active_vendors            String   @default("")
  ai_analytics              Json?
  avg_availability          Int      @default(0)
  certificate_availability  Boolean  @default(false)
  condition                 String[]
  country                   String
  createdAt                 DateTime @default(now())
  days_until_next_update    Int      @default(0)
  machine_learning_insights Json?
  part_number               String
  part_number_cleaned       String
  performance_metrics       Json?
  posted_ts                 DateTime
  predictive_features       Json?
  product_description       String
  quantity                  Int      @default(0)
  region                    String
  status                    Status
  title                     String
  updated_at                DateTime
  viewersCount              Int      @default(0)
}

model ChartData {
  id        String   @id @default(uuid())
  data      String
  createdAt DateTime @default(now())
  chatId    String   @unique
  summary   String
  prompt    String   @default("")
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model FeedContent {
  id      String @id @default(uuid())
  content String
  summary String
}

model SharedChat {
  id           String   @id @default(uuid())
  parentChatId String
  createdAt    DateTime @default(now())
  parentChat   Chat     @relation("Parent", fields: [parentChatId], references: [id], onDelete: Cascade)
}

model MacroLens {
  id   String @id @default(uuid())
  data Json
}

model articles {
  id              String    @id() @default(uuid())
  title           String?   @unique
  url             String    @unique
  published       DateTime? @db.Timestamptz(6)
  authors         String?
  text            String?   @db.Text
  image           String?
  date_crawled    DateTime? @default(now()) @db.Timestamp(6)
  isTextGenerated Boolean   @default(false)
  rank            Int       @default(0)
  image_keywords  Json[]    @default([])
}

model IpInformation {
  id               String   @id @default(uuid())
  ip_address       String
  confidence_score String
  location         Json
  company          Json
  createdAt        DateTime @default(now())
}

model IpGeoInformation {
  id       String @id @default(uuid())
  ip       String @unique
  city     String
  region   String
  country  String
  loc      String
  postal   String
  timezone String
}

model HomePageChartData {
  id        String   @id @default(uuid())
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArticleReaction {
  id        String       @id
  articleId String
  ipAddress String
  type      ReactionType
  createdAt DateTime     @default(now())

  @@unique([articleId, ipAddress])
}

enum ReactionType {
  LIKE
  DISLIKE
  DOUBLE_LIKE
}

enum Status {
  stock
  instock
  Reserved
  in_Repair
}
